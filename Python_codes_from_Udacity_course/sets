#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  8 19:13:45 2018

@author: nraghuva
"""

"""
SETS : To remove the duplicates in the list
"""

#Remove duplicates

def remove_duplicates(List_name):
     
    unique_list = []
     
    for name in List_name:
        if name not in unique_list:
            unique_list.append(name)
             
    return unique_list
     

print(remove_duplicates(["Nilesh","Jayesh","Darshana","Bhavna", "Nilesh"]))

"""
Removing duplicates from lists with a for loop works, but there is an alternative technique.
Python includes several data structures other than lists for storing collections, 
and one of them is perfectly suited for storing unique elements: sets.

Sets are collections of unique elements without any particular ordering.

"""
#create an empty set

myset = set()
#there is add method and not append method like list
myset.add("Nilesh")

print(myset)

myset.add("Bhavna")
print(myset)

print(myset.pop())
print(myset)

#sets are unordered hence there is not last element
#if you get time then please google this concept
"""
Ans:
    this is because sets uses Dictionary to store the data without data
    Dictionary uses hash to find a uniques location to store the key and val
    Sets uses hash to store the data and uses collision resolution technique
    of dictionary to solve the problem of hash collision.
"""

newset = set(["Nilesh", "Bhavna", "Jayesh", "Darshana"])
print(newset) # Notice the change in the order

